name: PR Check for Dev Branch

on:
  pull_request:
    branches:
      - dev

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'

      - name: Install dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest flake8

      - name: Run linting
        working-directory: ./backend
        run: flake8 . --max-line-length=120

      - name: Run tests
        working-directory: ./backend
        run: pytest

  docker-build:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: false
          load: true
          tags: app:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

  koyeb-deploy:
    needs: docker-build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install Koyeb CLI
        run: |
          curl -fsSL https://raw.githubusercontent.com/koyeb/koyeb-cli/master/install.sh | sh
          sudo mv /home/runner/.koyeb/bin/koyeb /usr/local/bin/

      - name: Login to Koyeb
        run: koyeb auth login --token ${{ secrets.KOYEB_API_TOKEN }}

      - name: Deploy and Wait for Status
        run: |
          APP_NAME="production-thundering-sharai/aupp-ecampus"
          
          # Deploy to Koyeb
          koyeb service update $APP_NAME \
            --docker ${{ github.repository }}:${{ github.sha }} \
            --ports 5001:http \
            --env FLASK_APP=app.py \
            --env FLASK_RUN_HOST=0.0.0.0 \
            --env FLASK_RUN_PORT=5001
          
          # Wait for deployment to be ready
          echo "Waiting for deployment to be ready..."
          MAX_ATTEMPTS=30
          ATTEMPT=0
          
          while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
            STATUS=$(koyeb service get $APP_NAME -o json | jq -r '.status')
          
            if [ "$STATUS" == "READY" ]; then
              echo "Deployment successful!"
              exit 0
            elif [ "$STATUS" == "ERROR" ]; then
              echo "Deployment failed!"
              exit 1
            fi
          
            ATTEMPT=$((ATTEMPT + 1))
            echo "Waiting for deployment... Attempt $ATTEMPT of $MAX_ATTEMPTS"
            sleep 20
          done
          
          echo "Deployment timed out!"
          exit 1

  verify-deployment:
    needs: koyeb-deploy
    runs-on: ubuntu-latest

    steps:
      - name: Install Koyeb CLI
        run: |
          curl -fsSL https://raw.githubusercontent.com/koyeb/koyeb-cli/master/install.sh | sh
          sudo mv /home/runner/.koyeb/bin/koyeb /usr/local/bin/

      - name: Login to Koyeb
        run: koyeb login -t ${{ secrets.KOYEB_API_TOKEN }}

      - name: Verify Deployment Status
        run: |
          APP_NAME="production-thundering-sharai/aupp-ecampus"
          STATUS=$(koyeb service get $APP_NAME -o json | jq -r '.status')
          
          if [ "$STATUS" == "READY" ]; then
            echo "Deployment verified successfully!"
            exit 0
          else:
            echo "Deployment verification failed! Status: $STATUS"
            exit 1
